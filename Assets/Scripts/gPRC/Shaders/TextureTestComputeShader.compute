#pragma kernel Test

uint srcWidth;
uint pixelPerCell;
uint pixelFormat;
uint dstWidth; 

uint2 dstPtr;

RWStructuredBuffer<int> _InBuffer;
RWStructuredBuffer<int> _OutBuffer;

void CreatePixels(int cell, int index)
{
    uint srcY = index / srcWidth;
    uint srcX = index - srcY * srcWidth;

    
    //for (uint indexPtr = 0; indexPtr < pixelPerCell; indexPtr++)
    //{
        //dstPtr[indexPtr] = srcY * pixelPerCell * dstWidth + indexPtr * dstWidth + srcX * pixelPerCell * pixelFormat;
        dstPtr.x = srcY * pixelPerCell * dstWidth + srcX * pixelPerCell * pixelFormat;
        dstPtr.y = srcY * pixelPerCell * dstWidth + dstWidth + srcX * pixelPerCell * pixelFormat;
    //}

    //for (uint indexPixelX = 0; indexPixelX < pixelPerCell; indexPixelX++)
   // {
        for (uint indexPixelY = 0; indexPixelY < pixelPerCell; indexPixelY++)
        {
            //_OutBuffer[dstPtr[indexPixelX] + indexPixelY * pixelFormat] = cell * 255 << 15 | 0xFF;
            _OutBuffer[dstPtr.x + indexPixelY * pixelFormat] = cell * 255 << 16 | 0xFF;
            _OutBuffer[dstPtr.y + indexPixelY * pixelFormat] = cell * 255 << 16 | 0xFF;
        }
   // }
}

void ExecuteCells(uint index)
{
    CreatePixels((_InBuffer[index] >> 0) & 0xFF, index * 4 + 0);
    CreatePixels((_InBuffer[index] >> 8) & 0xFF, index * 4 + 1);
    CreatePixels((_InBuffer[index] >> 16) & 0xFF, index * 4 + 2);
    CreatePixels((_InBuffer[index] >> 24) & 0xFF, index * 4 + 3);
}



[numthreads(1024, 1, 1)]
void Test(uint i : SV_DispatchThreadID)
{
    ExecuteCells(i); 
	//_OutBuffer[i * 4 + 0] = _InBuffer[i] & 0xFF;
	//_OutBuffer[i * 4 + 1] = (_InBuffer[i] >> 8) & 0xFF;
	//_OutBuffer[i * 4 + 2] = (_InBuffer[i] >> 16) & 0xFF;
	//_OutBuffer[i * 4 + 3] = (_InBuffer[i] >> 24) & 0xFF;
}