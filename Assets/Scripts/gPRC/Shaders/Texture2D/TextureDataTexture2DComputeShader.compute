#pragma kernel Test

uint srcWidth;
uint pixelPerCell;
uint dstWidth; 

uint2 dstPtr;
uint2 pixelCoord;
uint2 offsetX;
uint2 offsetY;

RWStructuredBuffer<uint> _InBuffer;
RWTexture2D<uint> _OutBuffer;

void CreatePixels(int cell, int index)
{
    uint srcY = index / srcWidth;
    uint srcX = index - srcY * srcWidth;

    //dstPtr.x = srcY * pixelPerCell * dstWidth + srcX * pixelPerCell;
    //dstPtr.y = srcY * pixelPerCell * dstWidth + dstWidth + srcX * pixelPerCell;

    pixelCoord.x = srcY * pixelPerCell;
    pixelCoord.y = srcY * pixelPerCell + dstWidth;

    //_OutBuffer[dstPtr.x] = (cell * 255) << 16 | 0xFF;
    //_OutBuffer[dstPtr.y] = (cell * 255) << 16 | 0xFF;
    
    //_OutBuffer[dstPtr.x + 1] = (cell * 255) << 16 | 0xFF;
    //_OutBuffer[dstPtr.y + 1] = (cell * 255) << 16 | 0xFF;

    _OutBuffer[pixelCoord] = (cell * 255) << 16 | 0xFF;
    //_OutBuffer[pixelCoord + offsetX] = (cell * 255) << 16 | 0xFF;

    //_OutBuffer[pixelCoord + offsetY] = (cell * 255) << 16 | 0xFF;
    //_OutBuffer[pixelCoord + offsetY + offsetX] = (cell * 255) << 16 | 0xFF;
}

void ExecuteCells(uint index)
{
    CreatePixels((_InBuffer[index] >> 0) & 0xFF, index * 4 + 0);
    CreatePixels((_InBuffer[index] >> 8) & 0xFF, index * 4 + 1);
    CreatePixels((_InBuffer[index] >> 16) & 0xFF, index * 4 + 2);
    CreatePixels((_InBuffer[index] >> 24) & 0xFF, index * 4 + 3);
}



[numthreads(1024, 1, 1)]
void Test(uint i : SV_DispatchThreadID)
{
    offsetX.x = 1;
    offsetX.y = 0;
    offsetY.x = 0;
    offsetY.y = 1;

    ExecuteCells(i); 
}